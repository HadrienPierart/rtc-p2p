{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Proof of concept and demo of using WebRTC data channels to create a browser-based P2P file sharing network.","google":"UA-17515286-1","name":"rtc-p2p","body":"rtc-p2p\r\n=======\r\n\r\nThis is a proof of concept and demo of using [WebRTC data channels](http://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-rtcdatachannel)\r\nto create a browser-based P2P file sharing network. The actual implementation\r\nis just a proof-of-concept, and not actually optimized for any real world\r\nusage.\r\n\r\nBrowser Compatibility\r\n---------------------\r\nSo far, this has only been tested with Chrome 26. **In order to work, the\r\n*Enable RTCDataChannel* flag must be enabled in Chrome** on the\r\n[chrome://flags](chrome://flags) configuration page.\r\n\r\nLimitations\r\n-----------\r\nSince this is a proof-of-concept, it has a number of limitations that mean\r\nit cannot be used for real life file sharing:\r\n\r\n* **Only the first 100 bytes of any file are shared.** There is a size\r\n  limit on each message on a data channel. Unfortunately, Chrome 26 doesn't\r\n  support reliable transport, so the data channel is UDP-like rather than\r\n  TCP-like. This means that building a reliable transport for transferring\r\n  an entire file in multiple blocks would require some work, and is beyond\r\n  the scope of this proof-of-concept.\r\n\r\n* **File requests are sent to all available peers.** If there are multiple\r\n  peers with the same file available, they will all respond to the request.\r\n\r\n* **Each peer automatically connects to all other peers.** This is clearly\r\n  not scalable, but works for the purposes of this demonstration.\r\n\r\nUsage\r\n-----\r\nInstall with `npm install` and start with `npm start`. The server will\r\nstart at [http://localhost:8000](http://localhost:8000).\r\n\r\nBrowse to the address above in two or more tabs, and register some files in\r\neach tab (preferrably text files).\r\n\r\nCopy a file hash from one tab into another tab's Request File box and\r\nrequest the file. The first 100 bytes of the request file should be\r\ntransferred.\r\n\r\nNode? I thought this was P2P?\r\n--------------------------------\r\nFiles are transferred directly between peers, but a server is needed for\r\ntwo things:\r\n\r\n1. WebRTC requires a server or some sort of intermediary to exchange\r\n   signaling and session data. This must be done before a connection\r\n   between two peers can be established.\r\n\r\n   In this case, each peer communicates with the server using WebSockets to\r\n   exchange signaling data with other peers.\r\n\r\n2. rtc-p2p uses a [web worker](http://en.wikipedia.org/wiki/Web_worker) to\r\n   compute the SHA1 hashes of registered files in the background. Web\r\n   workers run on the client, but must be served from a server.\r\n\r\nFurther Reading\r\n---------------\r\nSlides from my presentation on this project at [sthlm.js](http://www.meetup.com/sthlm-js/)\r\nare available at: [http://www.rvl.io/rohansingh/p2p](http://www.rvl.io/rohansingh/p2p)\r\n"}